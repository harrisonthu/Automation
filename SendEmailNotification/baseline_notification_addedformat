### Author:     Han Thu  	  ###
### Date:       March 15, 2019  ###
### Client:      ###
### Description:
###     Send email notification for whether Baseline is currently running or not   ###



#!/usr/bin/env python     ## Set interpreter used to be the one on your environment's $PATH
#import pyodbc
import time
import os
import datetime
import calendar
import pandas as pd
import pyodbc
from sqlalchemy import create_engine

### library for sending email notification ##
import smtplib
from email import encoders
from email.mime.base import MIMEBase
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from os.path import basename




SEPARATOR = ', '

class Mailer:
    def __init__(self):
        self.gmail_accnt = "sonyadasteam@gmail.com"
        self.pwd = "DASpassw0rd"

    def send_email(self, recipients, subject, body, attachment=None):
        sender = self.gmail_accnt # FROM
        pwd = self.pwd
        to = SEPARATOR.join(recipients) if type(recipients) is list else recipients

        msg = MIMEMultipart('alternative')
        msg['Subject'] = "Baseline Status"
        msg['From'] = self.gmail_accnt
        msg['To'] = str(recipients)
        currenttime = datetime.datetime.now().strftime("%H:%M:%S")
        msg.attach(MIMEText("Baseline is currently running now at " + str(currenttime) + " ! ", 'html'))

        if attachment:
            part = MIMEBase('application', "octet-stream")
            part.set_payload(open(attachment, "rb").read())
            encoders.encode_base64(part)
            part.add_header('Content-Disposition', 'attachment; filename="' + basename(attachment) + '"')
            msg.attach(part)

        try:
            server = smtplib.SMTP("smtp.gmail.com", 587)
            server.ehlo()
            server.starttls()
            server.login(sender, pwd)
			# recipients needs to be a LIST whereas msg['To'] needs to be a string
			# http://stackoverflow.com/a/28203862
            server.sendmail(sender, recipients, msg.as_string())
            server.close()
        except Exception as err:
            print("Failed to send the email with this error:\n", err)


"""
  Testing Function
"""
def Testing():
  a = Mailer()
  recipients = ['hanminthu2007@gmail.com', 'han.thu@groupm.com'] ## add recipients emails 'bhumika.bhandari@groupm.com'
  SendingEmailNotificationForStarting.msg = MIMEMultipart()
  a.send_email(recipients,"this is my subject", "This is my body !")



"""
  Function to connect the Server Name
  so that the other function can access and use the connection
"""
def Connection():
  Connection.ServerName = "10.2.186.148\SQLINS02"
  Connection.Database = "DM_1406_TRowePrice"
  Connection.UserPwd = "DASuser01:DASpassw0rd"
  Connection.Driver = "driver=SQL Server Native Client 11.0"
  # Create the connection
  print('Connecting ' + Connection.Database + ' Database ...')
  Connection.engine = create_engine('mssql+pyodbc://' + Connection.UserPwd + '@' + Connection.ServerName + '/' + Connection.Database + "?" + Connection.Driver)
  print("Connected ", Connection.Database, "!\n")



"""
  Function to Check the status of baseline
  Return:
      0 : if baseline is complete/not running
      1 : if baseline is still running
      2:  if baseline is stuck
"""
def StatusBaseline():

    ## SQL script to check if the the baseilne is currently running or not
    sql = """
        declare @Max_Date date, @row_count int
        select @Max_Date = max(run_date) from baseline_log_20190325
            SELECT [Flag_status]
            from
            (
            select Step, 
            case when Duration is null then 1 else 0 end as Flag,
            -- to check the duration if it is running for more than 3 hours
            case 
                    when Duration is null 
                            THEN
                            CASE 
                            WHEN run_date = convert(date,getdate())
                            AND CAST(CAST(DATEADD(second,1,CURRENT_TIMESTAMP) AS DATETIME) - CAST(Time_Started AS DATETIME) AS TIME) <= '03:00:00'			
                                    THEN 'In Progress'
                            ELSE 'Stuck' END
            ELSE 'Completed' end as [Status],
            case 
            when Duration is null 
                    THEN
                            CASE 
                            WHEN run_date = convert(date,getdate())
                            AND CAST(CAST(DATEADD(second,1,CURRENT_TIMESTAMP) AS DATETIME) - CAST(Time_Started AS DATETIME) AS TIME) <= '03:00:00'			
                                    THEN 1
                            ELSE 2 END
            ELSE 0 end as Flag_Status
            from baseline_log 
            where run_date = @Max_Date
            and Step = 'Complete Baseline Script')  aa
        """

    sqldata = pd.read_sql(sql, Connection.engine)  # store dataframe type
    sqldata['Flag_status'] = pd.to_numeric(sqldata['Flag_status'],downcast = 'integer')
    #sqldata['Flag_status'] = sqldata['Flag_status'].to_numeric()
    result  = sqldata.loc[0,'Flag_status']
    if int(result) == 0: ## Baseline is complete
        return 0
    elif int(result) ==1:
        return 1
    elif int(result) == 2:
        return 2
    return -1


def SendingEmailNotificationForStarting():
    ## Server domain name, for google = smtp.gmail.com
    try:
      SendingEmailNotificationForStarting.server = smtplib.SMTP('smtp.gmail.com',587)
      SendingEmailNotificationForStarting.server.starttls()
      SendingEmailNotificationForStarting.msg = MIMEMultipart()
      #SendingEmailNotificationForStarting.currenttime = datetime.datetime.now()
      SendingEmailNotificationForStarting.message = 'Subject: {}\n\n{}'.format("Notification for status of baseline for " + Connection.Database , "Baseline is currently running ! " )
      SendingEmailNotificationForStarting.msg.attach(MIMEText(SendingEmailNotificationForStarting.message))
      SendingEmailNotificationForStarting.server.login("sonyadasteam@gmail.com","youngmulababy")
      SendingEmailNotificationForStarting.server.sendmail("sonyadasteam@gmail.com", "han.thu@groupm.com", SendingEmailNotificationForStarting.message)
      SendingEmailNotificationForStarting.server.close()
    except:
      print ("Something went wrong !")


def main():
    ##TODO: check if baseline is running or not
    Connection()
    Testing()
    print(StatusBaseline())
    

    
"""
Main Function to run all of the functions/methods for this program"
"""
main()

